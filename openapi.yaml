swagger: "2.0"
info:
  description: "reader api service"
  version: "0.0.1"
  title: "Reader API"
  contact:
    email: "hello@gorillab.co"
host: "glab-reader-api.herokuapp.com"
basePath: "/api"
tags:
- name: "auth"
  description: "Auth module"
- name: "user"
  description: "User module"
- name: "source"
  description: "Source module"
- name: "post"
  description: "Post module"
schemes:
- "http"
consumes:
  - "application/json"
produces:
  - "application/json"
paths:
  /auth/signup:
    post:
      tags:
      - "auth"
      summary: "Sign up new account for user"
      description: ""
      operationId: "signup"
      consumes:
      - "application/x-www-form-urlencoded"
      parameters:
      - name: "email"
        in: "formData"
        description: "The email for login"
        required: true
        type: "string"
      - name: "username"
        in: "formData"
        description: "The user name for login"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid email"
  /auth/login:
    post:
      tags:
      - "auth"
      summary: "Logs user into the system by email"
      description: ""
      operationId: "loginByEmail"
      consumes:
      - "application/x-www-form-urlencoded"
      parameters:
      - in: "formData"
        name: "email"
        description: "The email for login"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation, send a token to email"
        400:
          description: "Invalid email"        
  /auth/verify:
    get:
      tags:
      - "auth"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "verify"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Token of user for login"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid token"    
  /auth/logout:
    get:
      tags:
      - "auth"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logout"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user:
    get:
      tags:
      - "user"
      summary: "Returns all users available in the database"
      description: ""
      operationId: "allUser"
      parameters:
      - name: "sort"
        in: "query"
        description: "Sort the list of users by property"
        required: false
        type: "string"
      - name: "limit"
        in: "query"
        description: "Limit number of users return from server"
        required: false
        type: "string"
      - name: "page"
        in: "query"
        description: "How many rows to skip"
        required: false
        type: "string"
      - name: "query"
        in: "query"
        description: "Keywords to search"
        required: false
        type: "string"
      - name: "filter"
        in: "query"
        description: "Conditions to get user list"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
      security:
      - AdminSecurity: []
    post:
      tags:
      - "user"
      summary: "Create new user"
      description: ""
      operationId: "createUser"
      consumes:
      - "application/x-www-form-urlencoded"
      parameters:
      - name: "email"
        in: "formData"
        description: "The email of user"
        required: true
        type: "string"
      - name: "username"
        in: "formData"
        description: "The user name of user"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid email"
      security:
      - AdminSecurity: []
  /user/count:
    get:
      tags:
      - "user"
      summary: "Count all users available in the database"
      description: ""
      operationId: "countUser"
      parameters:
      - name: "query"
        in: "query"
        description: "Keywords to search"
        required: false
        type: "string"
      - name: "filter"
        in: "query"
        description: "Conditions to get user list"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/CountObjs"
      security:
      - AdminSecurity: []
  /user/{id}:
    get:
      tags:
      - "user"
      summary: "Retrieve a single user by id"
      description: ""
      operationId: "getUser"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the user to get"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        404:
          description: "User not found"
      security:
      - AdminSecurity: []
    put:
      tags:
      - "user"
      summary: "Update user by id"
      description: ""
      operationId: "updateUser"
      consumes:
      - "application/x-www-form-urlencoded"
      parameters:
      - name: "id"
        in: "path"
        description: "id of the source to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "email"
        in: "formData"
        description: "The email of user"
        required: true
        type: "string"
      - name: "username"
        in: "formData"
        description: "The user name of user"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid email"
      security:
      - AdminSecurity: []
    delete:
      tags: 
      - "user"
      description: "Delete a user by id"
      operationId: "deleteUser"
      parameters:
      - name: "id"
        in: "path"
        description: "id of the user to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "user deleted"    
      security:
      - AdminSecurity: []
  /source:
    get:
      tags:
      - "source"
      summary: "Returns all sources available in the database"
      description: ""
      operationId: "allSource"
      parameters:
      - name: "sort"
        in: "query"
        description: "Sort the list of sources by property"
        required: false
        type: "string"
      - name: "limit"
        in: "query"
        description: "Limit number of sources return from server"
        required: false
        type: "string"
      - name: "page"
        in: "query"
        description: "How many rows to skip"
        required: false
        type: "string"
      - name: "query"
        in: "query"
        description: "Keywords to search"
        required: false
        type: "string"
      - name: "filter"
        in: "query"
        description: "Conditions to get source list"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Source"
      security:
      - UserSecurity: []
    post:
      tags:
      - "source"
      summary: "Create new source"
      description: ""
      operationId: "createSource"
      consumes:
      - "application/x-www-form-urlencoded"
      parameters:
      - name: "title"
        in: "formData"
        description: "The title of source"
        required: true
        type: "string"
      - name: "url"
        in: "formData"
        description: "The url of source"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Source"
        400:
          description: "Invalid title"
      security:
      - AdminSecurity: []
  /source/count:
    get:
      tags:
      - "source"
      summary: "Count all sources available in the database"
      description: ""
      operationId: "countSource"
      parameters:
      - name: "query"
        in: "query"
        description: "Keywords to search"
        required: false
        type: "string"
      - name: "filter"
        in: "query"
        description: "Conditions to get source list"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/CountObjs"
      security:
      - AdminSecurity: []
  /source/{id}:
    get:
      tags:
      - "source"
      summary: "Retrieve a single source by id"
      description: ""
      operationId: "getSource"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the source to get"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Source"
        404:
          description: "Source not found"
      security:
      - UserSecurity: []
      - AdminSecurity: []
    put:
      tags:
      - "source"
      summary: "Update source by id"
      description: ""
      operationId: "updateSource"
      consumes:
      - "application/x-www-form-urlencoded"
      parameters:
      - name: "id"
        in: "path"
        description: "Id of the source to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "title"
        in: "formData"
        description: "The title of source"
        required: true
        type: "string"
      - name: "url"
        in: "formData"
        description: "The url of source"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Source"
        400:
          description: "Invalid title"
      security:
      - AdminSecurity: []
    delete:
      tags: 
      - "source"
      description: "Delete a source by id"
      operationId: "deleteSource"
      parameters:
      - name: "id"
        in: "path"
        description: "id of the source to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "source deleted"    
      security:
      - AdminSecurity: []
  /source/{id}/subscribe:
    get:
      tags:
      - "source"
      summary: "Subscribe source by id"
      description: ""
      operationId: "subscribeSource"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the source to get"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Source"
        404:
          description: "Source not found"
      security:
      - UserSecurity: []
  /source/{id}/unsubscribe:
    get:
      tags:
      - "source"
      summary: "Unsubscribe source by id"
      description: ""
      operationId: "unsubscribeSource"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the source to get"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Source"
        404:
          description: "Source not found"
      security:
      - UserSecurity: []
  /post:
    get:
      tags:
      - "post"
      summary: "Returns all posts available in the database"
      description: ""
      operationId: "allPost"
      parameters:
      - name: "sort"
        in: "query"
        description: "Sort the list of posts by property"
        required: false
        type: "string"
      - name: "limit"
        in: "query"
        description: "Limit number of posts return from server"
        required: false
        type: "string"
      - name: "page"
        in: "query"
        description: "How many rows to skip"
        required: false
        type: "string"
      - name: "query"
        in: "query"
        description: "Keywords to search"
        required: false
        type: "string"
      - name: "filter"
        in: "query"
        description: "Conditions to get post list"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Post"
      security:
      - UserSecurity: []
  /post/count:
    get:
      tags:
      - "post"
      summary: "Count all posts available in the database"
      description: ""
      operationId: "countPost"
      parameters:
      - name: "query"
        in: "query"
        description: "Keywords to search"
        required: false
        type: "string"
      - name: "filter"
        in: "query"
        description: "Conditions to get post list"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/CountObjs"
      security:
      - UserSecurity: []
  /post/saved:
    get:
      tags:
      - "post"
      summary: "Returns all saved posts available in the database"
      description: ""
      operationId: "allSavedPost"
      parameters:
      - name: "sort"
        in: "query"
        description: "Sort the list of saved posts by property"
        required: false
        type: "string"
      - name: "limit"
        in: "query"
        description: "Limit number of saved posts return from server"
        required: false
        type: "string"
      - name: "page"
        in: "query"
        description: "How many rows to skip"
        required: false
        type: "string"
      - name: "query"
        in: "query"
        description: "Keywords to search"
        required: false
        type: "string"
      - name: "filter"
        in: "query"
        description: "Conditions to get saved post list"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Post"
      security:
      - UserSecurity: []
  /post/saved/count:
    get:
      tags:
      - "post"
      summary: "Count all saved posts available in the database"
      description: ""
      operationId: "countSavedPost"
      parameters:
      - name: "query"
        in: "query"
        description: "Keywords to search"
        required: false
        type: "string"
      - name: "filter"
        in: "query"
        description: "Conditions to get saved post list"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/CountObjs"
      security:
      - UserSecurity: []
  /post/viewed:
    get:
      tags:
      - "post"
      summary: "Returns all viewed posts available in the database"
      description: ""
      operationId: "allViewedPost"
      parameters:
      - name: "sort"
        in: "query"
        description: "Sort the list of viewed posts by property"
        required: false
        type: "string"
      - name: "limit"
        in: "query"
        description: "Limit number of viewed posts return from server"
        required: false
        type: "string"
      - name: "page"
        in: "query"
        description: "How many rows to skip"
        required: false
        type: "string"
      - name: "query"
        in: "query"
        description: "Keywords to search"
        required: false
        type: "string"
      - name: "filter"
        in: "query"
        description: "Conditions to get viewed post list"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Post"
      security:
      - UserSecurity: []
  /post/viewed/count:
    get:
      tags:
      - "post"
      summary: "Count all viewed posts available in the database"
      description: ""
      operationId: "countVieweddPost"
      parameters:
      - name: "query"
        in: "query"
        description: "Keywords to search"
        required: false
        type: "string"
      - name: "filter"
        in: "query"
        description: "Conditions to get viewed post list"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/CountObjs"
      security:
      - UserSecurity: []
  /post/{id}:
    get:
      tags:
      - "post"
      summary: "Retrieve a single post by id"
      description: ""
      operationId: "getPost"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the post to get"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Post"
        404:
          description: "Post not found"
      security:
      - UserSecurity: []
  /post/{id}/share:
    get:
      tags:
      - "post"
      summary: "Share a post by id"
      description: ""
      operationId: "sharePost"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the post to get"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Post"
        404:
          description: "Post not found"
      security:
      - UserSecurity: []
  /post/{id}/save:
    get:
      tags:
      - "post"
      summary: "Save a post by id"
      description: ""
      operationId: "savePost"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the post to get"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Post"
        404:
          description: "Post not found"
      security:
      - UserSecurity: []
securityDefinitions:
  UserSecurity:
    type: basic
  AdminSecurity:
    type: basic
    
definitions:
  User:
    type: "object"
    required:
    - "username"
    - "email"
    properties:
      id:
        type: "string"
        description: "Id for the user"
      username:
        type: "string"
        description: "Username for the user"
      email:
        type: "string"
        description: "Email for the user"
      token:
        type: "string"
        description: "Token for the user when login by email"
      type:
        type: "string"
        description: "Type for the user"
        enum: 
          - "admin"
          - "user"
      sources:
        type: "array"
        items:
          type: "string"
          description: "Reference to source model"
  Source: 
    type: "object"
    required:
    - "title"
    - "url"
    properties:
      id: 
        type: "string"
        description: "Id for the source"
      title:
        type: "string"
        description: "Title for the source"
      url:
        type: "string"
        description: "Url for the source"
  Post:
    type: "object"
    required:
      - "title"
      - "url"
    properties: 
      id: 
        type: "string"
        description: "Id for the post"
      title:
        type: "string"
        description: "Title for the post"
      content:
        type: "string"
        description: "Content for the post"
      image:
        type: "string"
        description: "Image path for the post"
      url:
        type: "string"
        description: "Url for the post"
      source:
        type: "string"
        format: "objectId"
        description: "Reference to Source model"
      meta:
        type: "object"
        description: "Meta of the post"
        properties:
          numViewed:
            type: "integer"
            format: "int64"
            description: "Count number of views in the post"
          numShared:
            type: "integer"
            format: "int64"
            description: "Count number of shares in the post"
          numSaved:
            type: "integer"
            format: "int64"
            description: "Count number of saves in the post"
  CountObjs:
    type: "object"
    properties:
      num:
        type: "integer"
        format: "int64"
  ApiResponse:
      type: "object"
      properties:
        code:
          type: "integer"
          format: "int32"
        type:
          type: "string"
        message:
          type: "string"